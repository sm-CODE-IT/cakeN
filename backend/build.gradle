plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'codeit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "16"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'mysql:mysql-connector-java'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'


	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'junit:junit:4.13.2'

	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

	// 이미지 썸네일 관련 라이브러리
	implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.11'

	// DTO <-> Entity 간 변환을 위한 Converter
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'

	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

	// spring rest docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'org.springframework.boot:spring-boot-gradle-plugin:2.7.3'
}

test {
	useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_16

/*// 스프링 실행 시 리액트 서버 자동 실행
task runReactServer(type: NpmTask) {
	workingDir = file("cake");
	args = ["run", "start"]
}*/

// React -> SpringBoot Project Build : React 결과물을 SpringBoot build 결과물에 포함시킨다.
/*

// 1. 빌드에서 제외 및 복사할 파일 설정
sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
			exclude 'templates/index.html
		}
	}
}

// 2. 작업할 Task 설정
processResources { 
	dependsOn "copyReactBuildFiles" 
}

// 3. React install 및 Build -> React로 작업한 소스 적용
def frontendDir = "$projectDir/src/main/frontend"

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'  // OS 설정에 따른 command line 방식 적용
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

// 4. React 빌드된 파일을 Spring Boot Build 폴더 내에 복사하기
task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}*/
